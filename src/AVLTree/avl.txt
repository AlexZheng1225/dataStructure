平衡二叉树：对于任意一个节点，左子树和右子树的高度差不能超过1
平衡二叉树的高度和节点数量之间的关系也是OlogN的

节点的高度=左右节点中高度最高的节点+1
计算平衡因子：对每个节点的左右子树的高度差，用左子树高度-右子树高度

AVLTree基于之前的BSTMap而来（教程）

AVL维护自平衡相关知识 ：

1.AVL树的左旋转和右旋转
在什么时候维护平衡：加入节点后，沿着加入节点向上维护平衡性
左旋转和右旋转思路：看图

LL和RR：
对于LL进行左旋转操作
对于RR使用右旋转操作

LR和RL:
LR:先把LR通过左旋转转化为LL，再使用LL对应的解决方式解决（右旋转）
RL:先把RL通过右旋转转化为RR，再使用RR对应的解决方式解决（左旋转）

不平衡的情况只有以上四种

avl平衡维护--维护后的树满足二分搜素树和平衡二叉树的性质
之所以把BST改为AVL，就是为了让树保持平衡，在BST在最坏情况下会退化成链表

测试《傲慢与偏见》的文本，BST和AVL时间相差不大
但当BST退化成为链表时，BST的效率远不如AVL，AVL自平衡

AVL树的删除：
也需要添加自平衡

AVL树相关问题:
基于AVL树的set和map
在Map中测试 性能 AVLMap > BSTMap > LinkedListMap
在Set中测试 性能 AVLSet > BSTSet > LinkedListSet

AVL树的优化：
最差的情况下 CRUD时间复杂度都为OlogN级别





