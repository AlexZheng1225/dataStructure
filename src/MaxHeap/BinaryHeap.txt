基于二叉树实现堆(主流) ==== 二叉堆
二叉堆是一颗完全二叉树
完全二叉树特点：不一定是满二叉树，但不满的那部分（缺失节点）一定是在整棵树的右下侧

完全二叉树：把元素排序排列成树的形状 （其实就是把元素一层一层从左到右的放，直到放不下了为止）

二叉堆的性质：二叉堆首先是一个完全二叉树，
且堆中任意节点的值总是不大于其父节点的值（即所有的节点值都大于等于其孩子的节点值）,这样得到的堆就是最大堆(相应的也可以定义最小堆)

可用数组的方式表示完全二叉树

用数组存储二叉堆

sift Up:上浮

sift Down:每次要下沉的元素都与该元素左右孩子进行比对，找到比自己大且最大的孩子进行交换，
可能会一直下沉到该节点的孩子节点都比该节点小，这就保证了没有违法堆的性质。


-------------------------------------------------
Heapify:将任意数组整理成堆的形状
将n个元素逐个出入到一个空堆中，算法复杂度是Onlogn
heapify的过程，算法复杂度为On



replace:取出堆中最大元素后，再放入一个新元素
实现：1 先extractMax 再add 两次Ologn级别的操作
2 可以直接将堆顶元素替换以后Sift Down，一次Ologn的操作

--------------------------------------------------

优先队列：底层可以用最大堆来实现

二叉堆最容易拓展成为D叉堆 d-ary heap (D个孩子--完全D叉树)
复杂度变得更低（因为层数变低） 但是在下沉的时候要考虑更多的节点

这一小节堆的缺点：只能看到堆首的元素，不能看到堆中间的元素
但是实际上 有时候需要修改堆中间的元素
索引堆 即是每个堆都会有索引

---------------------------------------------------
普通队列，优先队列
栈也可以是一个队列 看你怎么理解






